Script started on Thu 11 Apr 2019 09:16:51 PM MST
[?1034hsh-4.2$ cat -n IntegerSet.c
     1	#include <stdio.h>
     2	#include <stdlib.h>
     3	#include "IntegerSet.h"
     4	
     5	int isetInit(IntegerSet *iset, int bufferSize) {
     6	    iset->data = malloc( bufferSize * sizeof(int) );
     7	    iset->dataLength = 0;
     8	    iset->dataCapacity = bufferSize;
     9	    
    10	}
    11	
    12	void isetClear(IntegerSet *iset) {
    13	    
    14	    int i;
    15	    for (i = 0; i < iset->dataLength; i++) {
    16	        iset->data[i] = 0;
    17	    }
    18	    iset->dataLength = 0;
    19	}
    20	
    21	
    22	int isetAdd(IntegerSet *iset, int value) {
    23	    
    24	    if (iset->dataLength < iset->dataCapacity && isetIndex(iset, value) == -1) {
    25	        iset->dataLength ++;
    26	        iset->data[iset->dataLength - 1] = value;
    27	        return 1;
    28	    } else {
    29	        return 0;
    30	    }
    31	}
    32	
    33	int isetIndex(const IntegerSet *iset, int value) {
    34	    
    35	    int x;
    36	    for (x = 0; x < iset->dataLength; x++) {
    37	        if (iset->data[x] == value) {
    38	            return x;
    39	        }
    40	    }
    41	    return -1;
    42	}
    43	
    44	int isetAddArray(IntegerSet *iset, const int array[], int arrLen) {
    45	    int x;
    46	    int c;
    47	    for (x = 0; x < arrLen; x++) {
    48	        isetAdd(iset, array[x]);
    49	        c++;
    50	    }
    51	    return c;
    52	}
    53	
    54	int isetRemoveFast(IntegerSet *iset, int index) {
    55	    
    56	    if (index < 0 || index >= iset->dataLength) {
    57	        return 0;
    58	    }
    59	    else {
    60	        int value = iset->data[iset->dataLength - 1];
    61	        iset->data[index] = value;
    62	        value = 0;
    63	        iset->dataLength --;
    64	        return 1;
    65	    }
    66	}
    67	
    68	int isetRemoveStable(IntegerSet *iset, int index) {
    69	    
    70	    if (index < 0 || index >= iset->dataLength) {
    71	        return 0;
    72	    }
    73	    else {
    74	        int x;
    75	        iset->data[index] =  0;
    76	        for (x = (index + 1); x < iset->dataLength; x++) {
    77	            iset->data[x - 1] = iset->data[x];
    78	        }
    79	        iset->dataLength --;
    80	        return 1;
    81	    }
    82	}
    83	
    84	void isetPrint(const IntegerSet *iset, int numberOfColumns) {
    85	    int i = 0;
    86	    for (i = 0; i < iset->dataLength; i++) {
    87	        if (i % numberOfColumns== 0 && i != 0)
    88	            fputc('\n', stdout);
    89	        printf("%6d", iset->data[i]);
    90	    }
    91	    fputc('\n', stdout);
    92	}
    93	
    94	int isetCopy(const IntegerSet *source, IntegerSet *copy){
    95	    isetClear(copy);
    96	    return isetAddArray(copy, source->data, source->dataLength);
    97	}
    98	
    99	void isetFree(IntegerSet *iset){
   100	    if (iset->data == NULL){
   101	        iset->dataCapacity = 0;
   102	        iset->dataLength = 0;
   103	        free(iset->data);
   104	        iset->data = NULL;
   105	    }
   106	}
   107	
   108	int isetResize(IntegerSet *iset, int size) {
   109	    int *check;
   110	    check = realloc(iset->data, (size * sizeof(int)));
   111	    if (check != NULL){
   112	        iset->dataCapacity = size;
   113	        return 1;
   114	    }
   115	    return 0;
   116	    
   117	}
   118	
   119	IntegerSet* isetClone(const IntegerSet *iset){}
   120	IntegerSet* isetDestroy(IntegerSet *iset){}
sh-4.2$ cat -n hw12.c
     1	/*
     2	 * File:    hw12.c
     3	 * Project: Homework 12
     4	 * Purpose: test driver for student homework
     5	 * Author:  Michael Van Hilst
     6	 * Version: 2.1 April 18, 2018
     7	 *          3.0 April 4, 2019 Major revisions
     8	 *
     9	 * Copyright 2017, 2019 (c) Michael Van Hilst All rights reserverd.
    10	 */
    11	#include <stdio.h>      /* for printf() */
    12	#include <stdlib.h>     /* for NULL, EXIT_SUCCESS */
    13	#include "IntegerSet.h" /* homework project header file */
    14	
    15	static int fillRandom(int array[], int arrLen, int lowerBound, int upperBound);
    16	static int myrand(void);
    17	#define MYRAND_MAX 32768
    18	
    19	/* DATASZ is set to exceed size of array in the IntegerBuffer */
    20	#define DATASZ 48
    21	int main(void) {
    22	    int i = 0;
    23	    int index = 0;
    24	    int tempSize = 0;
    25	    int tempLength = 0;
    26	    IntegerSet iset1;
    27	    IntegerSet iset2;
    28	    IntegerSet *iset3 = NULL;
    29	    int data[DATASZ];
    30	    /* test that isetInit is working correctly */
    31	    printf("Phase 1: Testing isetCreate()\n");
    32	    isetInit(&iset1, 35);
    33	    isetInit(&iset2, 20);
    34	    printf("  set1 size: %d, length: %d\n",
    35	       iset1.dataCapacity, iset1.dataLength);
    36	    printf("  set2 size: %d, length: %d\n",
    37	       iset2.dataCapacity, iset2.dataLength);
    38	    /* test that isetAdd is working correctly */
    39	    printf("Phase 2: Testing isetAdd()\n");
    40	    isetAdd(&iset1, 5);
    41	    isetAdd(&iset1, 17);
    42	    isetAdd(&iset1, 2);
    43	    isetAdd(&iset1, 5);
    44	    isetAdd(&iset1, 2);
    45	    isetAdd(&iset1, 3);
    46	    isetPrint(&iset1, 10);
    47	    /* test that isetAddArray is working correctly */
    48	    printf("Phase 3: Testing isetAddArray()\n");
    49	    printf("  fillRandom returned %d\n", fillRandom(data, DATASZ, 20, 50));
    50	    isetAddArray(&iset1, data, DATASZ);
    51	    isetPrint(&iset1, 10);
    52	    printf("Phase 3: Testing isetAddArray() on set2\n");
    53	    isetAddArray(&iset2, data, 30);
    54	    isetPrint(&iset2, 10);
    55	    printf("  set1 size: %d, length: %d\n",
    56	       iset1.dataCapacity, iset1.dataLength);
    57	    printf("  set2 size: %d, length: %d\n",
    58	       iset2.dataCapacity, iset2.dataLength);
    59	    /* test that isetCopy is working correctly */
    60	    printf("Phase 4: Testing isetCopy() to set2\n");
    61	    isetCopy(&iset1, &iset2);
    62	    isetPrint(&iset2, 10);
    63	    /* test that isetClear is working correctly */
    64	    printf("Phase 5: Testing isetClear()\n");
    65	    isetClear(&iset1); 
    66	    printf("  set1 size: %d, length: %d\n",
    67	       iset1.dataCapacity, iset1.dataLength);
    68	    for (i = 0; i < 5; i++)
    69	        isetAdd(&iset1, i);
    70	    for (i = 9; i > 0; i--)
    71	        isetAdd(&iset1, i);
    72	    isetPrint(&iset1, 10);
    73	    /* test that resize works correctly */
    74	    printf("Phase 6: Testing isetResize()\n");
    75	    tempSize = iset2.dataCapacity;
    76	    tempLength = iset2.dataLength;
    77	    isetPrint(&iset2, 10);
    78	    printf("  attempting to add this data (with duplicates) from an array:\n");
    79	    printf("  %d", data[0]);
    80	    for (i = 1; i < 16; i++)
    81	        printf(", %d", data[i]);
    82	    printf("\n");
    83	    printf("  set2 size: %d, length: %d\n",
    84	       iset2.dataCapacity, iset2.dataLength);
    85	    isetResize(&iset2, 30);
    86	    printf("  set2 size: %d, length: %d\n",
    87	       iset2.dataCapacity, iset2.dataLength);
    88	    tempSize = iset2.dataCapacity;
    89	    tempLength = iset2.dataLength;
    90	    isetPrint(&iset2, 10);
    91	    /* test that isetIndex and isetRemove work correctly */
    92	    printf("Phase 7: testing isetIndex() and isetRemove()\n");
    93	    index = isetIndex(&iset1, 2);
    94	    isetRemoveFast(&iset1, index);
    95	    isetRemoveStable(&iset1, isetIndex(&iset1, 4));
    96	    isetPrint(&iset1, 10);
    97	    /* test that isetClone works correctly */
    98	    printf("Phase 8: testing isetClone()\n");
    99	    iset3 = isetClone(&iset2);
   100	    isetPrint(iset3, 10);
   101	    printf("  set3 size: %d, length: %d\n",
   102	       iset3->dataCapacity, iset3->dataLength);
   103	    isetFree(&iset1);
   104	    isetFree(&iset2);
   105	    iset3 = isetDestroy(iset3);
   106	    return EXIT_SUCCESS;
   107	}
   108	
   109	/* Function: fillRandom
   110	 * Purpose:  fill an integer array with random values in a given range
   111	 * Argument: array      - an array of integers
   112	 * Argument: arrLen     - the number of integers to generate
   113	 * Argument: lowerBound - the lowest value that could be generated
   114	 * Argument: upperBound - the highest value that could be generated
   115	 * Returns:  nothing
   116	 * Precondition: array points to a valid array of ints
   117	 * Precondition: arrLen is not greater than the available space in array
   118	 */
   119	static int fillRandom(int array[], int arrLen, int lowerBound, int upperBound) {
   120	    int i = 0;
   121	    /* static makes this a persistent variable
   122	       that is initialized only once */
   123	    static int notSeeded = 1;
   124	    double range = 1.0 + upperBound - lowerBound;
   125	    if (notSeeded) {
   126	        /* if we want it seeded, the srand goes here */
   127	        notSeeded = 0;
   128	    }
   129	    for (i = 0; i < arrLen; i++) {
   130	        /* refactored the order to force doubles to be used w/o cast */
   131	        array[i] = (int)(myrand() * (range / MYRAND_MAX) + lowerBound);
   132	    }
   133	    return i;
   134	}
   135	
   136	/* POSIX.1-2001 gives the following example of an implementation of rand(),
   137	 * useful when one needs the same sequence on different machines.
   138	 */
   139	static int myrand(void) {
   140	    static unsigned long next = 1;
   141	    next = next * 1103515245 + 12345;
   142	    return((unsigned)(next / 65536) % MYRAND_MAX);
   143	}
   144	
sh-4.2$ cat -n hw[K[KIntegerse[K[KSet.h
     1	/*
     2	 * File:    IntegerSet.h
     3	 * Project: Assignment 12
     4	 * Author:  Michael Van Hilst
     5	 * Version: 2.1 April 13, 2018 Made isetAddArray array argument const.
     6	 *
     7	 * Copyright (c) 2017,2018,2019 Michael Van Hilst all rights reserved
     8	 * Distribution without written permission of the author is prohibited
     9	 */
    10	#ifndef INTEGER_SET_H
    11	#define INTEGER_SET_H
    12	
    13	typedef struct {
    14	    int *data;
    15	    int dataCapacity;
    16	    int dataLength;
    17	} IntegerSet;
    18	
    19	/* from assignment 11 - unchanged except struct type */
    20	void isetPrint(const IntegerSet *iset, int columns);
    21	void isetClear(IntegerSet *iset);
    22	int isetIndex(const IntegerSet *iset, int value);
    23	int isetRemoveFast(IntegerSet *iset, int index);
    24	int isetRemoveStable(IntegerSet *iset, int index);
    25	int isetAddArray(IntegerSet *iset, const int array[], int arrayLength);
    26	
    27	/* for assignment 12 new behaviors */
    28	int isetAdd(IntegerSet *iset, int value);
    29	int isetCopy(const IntegerSet *source, IntegerSet *copy);
    30	
    31	/* for assignment 12 new memory management */
    32	int isetInit(IntegerSet *iset, int size);
    33	void isetFree(IntegerSet *iset);
    34	int isetResize(IntegerSet *iset, int size);
    35	
    36	/* for assignment 12 extra credit */
    37	IntegerSet* isetCreate(int size);
    38	IntegerSet* isetClone(const IntegerSet *iset);
    39	IntegerSet* isetDestroy(IntegerSet *iset);
    40	
    41	/* for assignment 13 coming */
    42	int isetAdd(IntegerSet *iset, int value);
    43	int isetIndexFast(const IntegerSet *iset, int value);
    44	
    45	#endif /* INTEGER_SET_H */
sh-4.2$ gcc -ansi Integers[KSet.c hw12.c
sh-4.2$ a.out
Phase 1: Testing isetCreate()
  set1 size: 35, length: 0
  set2 size: 20, length: 0
Phase 2: Testing isetAdd()
     5    17     2     3
Phase 3: Testing isetAddArray()
  fillRandom returned 48
     5    17     2     3    35    25    29    36    49    41
    27    23    22    32    28    31    50    43    40    44
    45    24    39    30    48    38    46    26    34    42
Phase 3: Testing isetAddArray() on set2
    35    25    29    36    49    41    27    23    22    32
    28    31    50    43    40    44    45    24    39    30
  set1 size: 35, length: 30
  set2 size: 20, length: 20
Phase 4: Testing isetCopy() to set2
     5    17     2     3    35    25    29    36    49    41
    27    23    22    32    28    31    50    43    40    44
Phase 5: Testing isetClear()
  set1 size: 35, length: 0
     0     1     2     3     4     9     8     7     6     5
Phase 6: Testing isetResize()
     5    17     2     3    35    25    29    36    49    41
    27    23    22    32    28    31    50    43    40    44
  attempting to add this data (with duplicates) from an array:
  35, 25, 29, 36, 49, 25, 41, 27, 35, 23, 22, 32, 28, 31, 50, 36
  set2 size: 20, length: 20
  set2 size: 30, length: 20
     5    17     2     3    35    25    29    36    49    41
    27    23    22    32    28    31    50    43    40    44
Phase 7: testing isetIndex() and isetRemove()
     0     1     5     3     9     8     7     6
Phase 8: testing isetClone()
     5    17     2     3    35    25    29    36    49    41
    27    23    22    32    28    31    50    43    40    44
  set3 size: 30, length: 20
sh-4.2$ exit
exit

Script done on Thu 11 Apr 2019 09:17:32 PM MST
